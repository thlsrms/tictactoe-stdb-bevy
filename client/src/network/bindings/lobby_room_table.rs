// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE
// WILL NOT BE SAVED. MODIFY TABLES IN YOUR MODULE SOURCE CODE INSTEAD.

#![allow(unused, clippy::all)]
use super::lobby_room_type::LobbyRoom;
use spacetimedb_sdk::__codegen::{self as __sdk, __lib, __sats, __ws};

/// Table handle for the table `lobby_room`.
///
/// Obtain a handle from the [`LobbyRoomTableAccess::lobby_room`] method on [`super::RemoteTables`],
/// like `ctx.db.lobby_room()`.
///
/// Users are encouraged not to explicitly reference this type,
/// but to directly chain method calls,
/// like `ctx.db.lobby_room().on_insert(...)`.
pub struct LobbyRoomTableHandle<'ctx> {
    imp: __sdk::TableHandle<LobbyRoom>,
    ctx: std::marker::PhantomData<&'ctx super::RemoteTables>,
}

#[allow(non_camel_case_types)]
/// Extension trait for access to the table `lobby_room`.
///
/// Implemented for [`super::RemoteTables`].
pub trait LobbyRoomTableAccess {
    #[allow(non_snake_case)]
    /// Obtain a [`LobbyRoomTableHandle`], which mediates access to the table `lobby_room`.
    fn lobby_room(&self) -> LobbyRoomTableHandle<'_>;
}

impl LobbyRoomTableAccess for super::RemoteTables {
    fn lobby_room(&self) -> LobbyRoomTableHandle<'_> {
        LobbyRoomTableHandle {
            imp: self.imp.get_table::<LobbyRoom>("lobby_room"),
            ctx: std::marker::PhantomData,
        }
    }
}

pub struct LobbyRoomInsertCallbackId(__sdk::CallbackId);
pub struct LobbyRoomDeleteCallbackId(__sdk::CallbackId);

impl<'ctx> __sdk::Table for LobbyRoomTableHandle<'ctx> {
    type Row = LobbyRoom;
    type EventContext = super::EventContext;

    fn count(&self) -> u64 {
        self.imp.count()
    }
    fn iter(&self) -> impl Iterator<Item = LobbyRoom> + '_ {
        self.imp.iter()
    }

    type InsertCallbackId = LobbyRoomInsertCallbackId;

    fn on_insert(
        &self,
        callback: impl FnMut(&Self::EventContext, &Self::Row) + Send + 'static,
    ) -> LobbyRoomInsertCallbackId {
        LobbyRoomInsertCallbackId(self.imp.on_insert(Box::new(callback)))
    }

    fn remove_on_insert(&self, callback: LobbyRoomInsertCallbackId) {
        self.imp.remove_on_insert(callback.0)
    }

    type DeleteCallbackId = LobbyRoomDeleteCallbackId;

    fn on_delete(
        &self,
        callback: impl FnMut(&Self::EventContext, &Self::Row) + Send + 'static,
    ) -> LobbyRoomDeleteCallbackId {
        LobbyRoomDeleteCallbackId(self.imp.on_delete(Box::new(callback)))
    }

    fn remove_on_delete(&self, callback: LobbyRoomDeleteCallbackId) {
        self.imp.remove_on_delete(callback.0)
    }
}

#[doc(hidden)]
pub(super) fn register_table(client_cache: &mut __sdk::ClientCache<super::RemoteModule>) {
    let _table = client_cache.get_or_make_table::<LobbyRoom>("lobby_room");
    _table.add_unique_constraint::<u32>("id", |row| &row.id);
    _table.add_unique_constraint::<String>("game_id", |row| &row.game_id);
    _table.add_unique_constraint::<__sdk::Identity>("owner", |row| &row.owner);
}
pub struct LobbyRoomUpdateCallbackId(__sdk::CallbackId);

impl<'ctx> __sdk::TableWithPrimaryKey for LobbyRoomTableHandle<'ctx> {
    type UpdateCallbackId = LobbyRoomUpdateCallbackId;

    fn on_update(
        &self,
        callback: impl FnMut(&Self::EventContext, &Self::Row, &Self::Row) + Send + 'static,
    ) -> LobbyRoomUpdateCallbackId {
        LobbyRoomUpdateCallbackId(self.imp.on_update(Box::new(callback)))
    }

    fn remove_on_update(&self, callback: LobbyRoomUpdateCallbackId) {
        self.imp.remove_on_update(callback.0)
    }
}

#[doc(hidden)]
pub(super) fn parse_table_update(
    raw_updates: __ws::TableUpdate<__ws::BsatnFormat>,
) -> __sdk::Result<__sdk::TableUpdate<LobbyRoom>> {
    __sdk::TableUpdate::parse_table_update(raw_updates).map_err(|e| {
        __sdk::InternalError::failed_parse("TableUpdate<LobbyRoom>", "TableUpdate")
            .with_cause(e)
            .into()
    })
}

/// Access to the `id` unique index on the table `lobby_room`,
/// which allows point queries on the field of the same name
/// via the [`LobbyRoomIdUnique::find`] method.
///
/// Users are encouraged not to explicitly reference this type,
/// but to directly chain method calls,
/// like `ctx.db.lobby_room().id().find(...)`.
pub struct LobbyRoomIdUnique<'ctx> {
    imp: __sdk::UniqueConstraintHandle<LobbyRoom, u32>,
    phantom: std::marker::PhantomData<&'ctx super::RemoteTables>,
}

impl<'ctx> LobbyRoomTableHandle<'ctx> {
    /// Get a handle on the `id` unique index on the table `lobby_room`.
    pub fn id(&self) -> LobbyRoomIdUnique<'ctx> {
        LobbyRoomIdUnique {
            imp: self.imp.get_unique_constraint::<u32>("id"),
            phantom: std::marker::PhantomData,
        }
    }
}

impl<'ctx> LobbyRoomIdUnique<'ctx> {
    /// Find the subscribed row whose `id` column value is equal to `col_val`,
    /// if such a row is present in the client cache.
    pub fn find(&self, col_val: &u32) -> Option<LobbyRoom> {
        self.imp.find(col_val)
    }
}

/// Access to the `game_id` unique index on the table `lobby_room`,
/// which allows point queries on the field of the same name
/// via the [`LobbyRoomGameIdUnique::find`] method.
///
/// Users are encouraged not to explicitly reference this type,
/// but to directly chain method calls,
/// like `ctx.db.lobby_room().game_id().find(...)`.
pub struct LobbyRoomGameIdUnique<'ctx> {
    imp: __sdk::UniqueConstraintHandle<LobbyRoom, String>,
    phantom: std::marker::PhantomData<&'ctx super::RemoteTables>,
}

impl<'ctx> LobbyRoomTableHandle<'ctx> {
    /// Get a handle on the `game_id` unique index on the table `lobby_room`.
    pub fn game_id(&self) -> LobbyRoomGameIdUnique<'ctx> {
        LobbyRoomGameIdUnique {
            imp: self.imp.get_unique_constraint::<String>("game_id"),
            phantom: std::marker::PhantomData,
        }
    }
}

impl<'ctx> LobbyRoomGameIdUnique<'ctx> {
    /// Find the subscribed row whose `game_id` column value is equal to `col_val`,
    /// if such a row is present in the client cache.
    pub fn find(&self, col_val: &String) -> Option<LobbyRoom> {
        self.imp.find(col_val)
    }
}

/// Access to the `owner` unique index on the table `lobby_room`,
/// which allows point queries on the field of the same name
/// via the [`LobbyRoomOwnerUnique::find`] method.
///
/// Users are encouraged not to explicitly reference this type,
/// but to directly chain method calls,
/// like `ctx.db.lobby_room().owner().find(...)`.
pub struct LobbyRoomOwnerUnique<'ctx> {
    imp: __sdk::UniqueConstraintHandle<LobbyRoom, __sdk::Identity>,
    phantom: std::marker::PhantomData<&'ctx super::RemoteTables>,
}

impl<'ctx> LobbyRoomTableHandle<'ctx> {
    /// Get a handle on the `owner` unique index on the table `lobby_room`.
    pub fn owner(&self) -> LobbyRoomOwnerUnique<'ctx> {
        LobbyRoomOwnerUnique {
            imp: self.imp.get_unique_constraint::<__sdk::Identity>("owner"),
            phantom: std::marker::PhantomData,
        }
    }
}

impl<'ctx> LobbyRoomOwnerUnique<'ctx> {
    /// Find the subscribed row whose `owner` column value is equal to `col_val`,
    /// if such a row is present in the client cache.
    pub fn find(&self, col_val: &__sdk::Identity) -> Option<LobbyRoom> {
        self.imp.find(col_val)
    }
}
